// <auto-generated />
using System;
using LeagueBot.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LeagueBot.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240316165108_PollId")]
    partial class PollId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LeagueBot.Domain.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChatId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActiveForPoll")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("LeagueBot.Domain.DailyPoll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChatId")
                        .HasColumnType("text");

                    b.Property<DateTime>("PollDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PollId")
                        .HasColumnType("text");

                    b.Property<bool>("PollIsStarted")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan>("TimeToStartGame")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("TimeToStartVote")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("DailyPolls");
                });

            modelBuilder.Entity("LeagueBot.Domain.PollUserResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DailyPollId")
                        .HasColumnType("integer");

                    b.Property<int>("PollResult")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DailyPollId");

                    b.HasIndex("UserId");

                    b.ToTable("PollUserResult");
                });

            modelBuilder.Entity("LeagueBot.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LeagueBot.Domain.PollUserResult", b =>
                {
                    b.HasOne("LeagueBot.Domain.DailyPoll", "DailyPoll")
                        .WithMany("PollUserResults")
                        .HasForeignKey("DailyPollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeagueBot.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("DailyPoll");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LeagueBot.Domain.DailyPoll", b =>
                {
                    b.Navigation("PollUserResults");
                });
#pragma warning restore 612, 618
        }
    }
}
